
plugins {
  id 'java'
  id 'application'
  id 'org.jetbrains.kotlin.jvm' version '1.9.23'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
  //dokka para la documentación
  id 'org.jetbrains.dokka' version '1.9.20'
  //jacoco
  id 'jacoco'
  //Para serializar
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.0'
}

group 'nicolasorteg'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.2'
}

java {
  modularity.inferModulePath.set(true)
}

tasks.named("run") {
  doFirst {
    classpath += files("$buildDir/classes/kotlin/main")
  }
}
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'nicolasorteg.gestion1daw'
  mainClass = 'nicolasorteg.gestion1daw.MainApp'
}
kotlin {
  jvmToolchain( 17 )
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

  // Logger
  implementation("org.lighthousegames:logging:1.3.0")
  implementation("ch.qos.logback:logback-classic:1.5.13")

  //BCrypt
  implementation("org.mindrot:jbcrypt:0.4")

  // BBDD H2
  implementation("com.h2database:h2:2.2.224")

  // JDBI
  // Reflexión
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  // Core
  implementation("org.jdbi:jdbi3-core:3.48.0")
  // SQL Object
  implementation("org.jdbi:jdbi3-sqlobject:3.48.0")
  // Extensión para Kotlin
  implementation("org.jdbi:jdbi3-kotlin:3.48.0")
  // Extensión de SQL Object para Kotlin
  implementation("org.jdbi:jdbi3-kotlin-sqlobject:3.48.0")

  // Result
  implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")

  // Vaadin
  implementation("com.vaadin:open:8.5.0.4")

  // Caché Caffeine
  implementation("com.github.ben-manes.caffeine:caffeine:3.2.0")

  // Koin
  implementation(platform("io.insert-koin:koin-bom:3.5.6"))
  implementation("io.insert-koin:koin-core")

  // JUnit
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

  // Jacoco
  implementation("org.jacoco:org.jacoco.core:0.8.12")
  testImplementation "org.jetbrains.kotlin:kotlin-test:1.9.23"

  // Reflexión de tipos genéricos, las versiones más recientes de JDBI no la incluyen por defecto
  implementation 'io.leangen.geantyref:geantyref:1.3.0'

  testImplementation("org.mockito.kotlin:mockito-kotlin:5.3.1")
  testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
  implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.23")
}

test {
  useJUnitPlatform()
  finalizedBy(tasks.jacocoTestReport)
}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

jar {
  manifest {
    attributes 'Main-Class': 'nicolasorteg.gestion1daw.MainApp'
  }
  from {
    configurations["compileClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
  }
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
jacocoTestReport{
  dependsOn test
  reports {
    html.required=true
    csv.required=true
    xml.required=true
  }
  afterEvaluate {
    classDirectories.setFrom (files(classDirectories.files.collect{
      fileTree(dir: it, exclude: [
              "**/models/**",
              "**/controllers/**",
              "**/viewmodels/**",
              "**/database/**",
              "**/routes/**",
              "**/exceptions/**",
              "**/*Main*.*"
      ])
    }))
  }
}

jacocoTestCoverageVerification{
  violationRules {
    rule {
      limit {
        minimum= 0.6
      }
    }
  }
}
task testCoverage(group: 'verification', description: 'Runs the unit tests with coverage'){
  dependsOn test,
          jacocoTestReport,
          jacocoTestCoverageVerification
}
tasks.processResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
